LB=30
ROCFTP(LB,start, post,1)
post<- function(x)
{
dnorm(x, mean=30, sd=1)
}
start<- c(20,40)
LB=30
ROCFTP(LB,start, post,1)
RG <- function(i){ROCFTP(30, c(20,40), post, 1)}
n <- 100
mrtx <- matrix(1:n, ncol=1)
apply(mrtx,1,RG)
dat <- apply(mrtx,1,RG)
qqline(dat, col = "steelblue", lwd = 2)
qqnorm(dat, pch = 16, frame = FALSE)
qqline(dat, col = "steelblue", lwd = 2)
n <- 1000
mrtx <- matrix(1:n, ncol=1)
dat <- apply(mrtx,1,RG)
qqnorm(dat, pch = 16, frame = FALSE)
qqline(dat, col = "steelblue", lwd = 2)
dat <- apply(mrtx,1,RG)
qqnorm(dat, pch = 16, frame = FALSE)
qqline(dat, col = "steelblue", lwd = 2)
qqline(dat, col = "steelblue", lwd = 3)
logpost<- function(x)
{
dnorm(x, mean=30, sd=1, log=TRUE)
}
start<- c(20,40)
n<- 116
f<- 10000
s<-NULL
for(i in 1:f)
{
s[i]<-ROCFTP(n,start, logpost,3.5)
}
n<- 116
f<- 100
s<-NULL
for(i in 1:f)
{
s[i]<-ROCFTP(n,start, logpost,3.5)
}
s
ROCFTP(n,start, logpost,3.5)
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=TRUE)
}
post
start
LB
sigma=3.5
sigma
if (LB <= 0 | length(LB) > 1 | is.numeric(LB)==FALSE) {
return(noquote("Error: The length of Time Bolck should be an integer"))
LB <= 0 | length(LB) > 1 | is.numeric(LB)==FALSE
LB <= 0
length(LB) > 1
is.numeric(LB)
is.numeric(LB)==FALSE
length(start) != 2
is.vector(start)==FALSE
sigma <= 0
length(sigma) > 1
is.numeric(sigma)==FALSE
allresults<- CFTP(LB,start, post,sigma)
is.character(allresults)
allresults
CFTP(LB,start, post,sigma)
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
M.MSH.sampler(LB,init, post, sigma)
samples<-  M.MSH.sampler(LB,init, post, sigma)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
length(unique(samples[nrow(samples),]))==1
r
y
samples<-  M.MSH.sampler(LB,init, post, sigma)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
length(unique(samples[nrow(samples),]))==1
r
y
samples<-  M.MSH.sampler(LB,init, post, sigma)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
y
samples<-  M.MSH.sampler(LB,init, post, sigma)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
y
M.MSH.sampler(LB,init, post, sigma)
M.MSH.sampler(LB,init, post, sigma)
LB
LB=300
M.MSH.sampler(LB,init, post, sigma)
d=M.MSH.sampler(LB,init, post, sigma)
d[300,]
LB=3000
d=M.MSH.sampler(LB,init, post, sigma)
post
d[3000,]
init
init<- start
LB=3000
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
init
nn<- length(init)
nn
d<- matrix(rep(0,nn*(LB+1)), nrow=LB+1)
dim(d)
d[1,]<- init
y<-multishift(d[i,],sigma)
y
u<- runif(1,0,1)
ratio<- post(y)/post(d[i,])
ratio
u<ratio
y
M.MSH.sampler<- function(LB,init, post,sigma)
{
nn<- length(init)
d<- matrix(rep(0,nn*(LB+1)), nrow=LB+1)
d[1,]<- init
for(i in 1:LB)
{
y<-multishift(d[i,],sigma)
u<- runif(1,0,1)
ratio<- post(y)/post(d[i,])
d[i+1,]<- ifelse(u<ratio,y,d[i,])
}
return(d)
}
LB=3000
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
init=start
LB=3000
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
post<- function(x)
{
dnorm(x, mean=30, sd=1)
}
init=start
LB=3000
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
M.MSH.sampler<- function(LB,init, post,sigma)
{
nn<- length(init)
d<- matrix(rep(0,nn*(LB+1)), nrow=LB+1)
d[1,]<- init
for(i in 1:LB)
{
y<-multishift(d[i,],sigma)
u<- runif(1,0,1)
logratio<- logpost(y)-logpost(d[i,])
for(j in 1:length(logratio))
{
if(log(u)< logratio[j]) d[i+1,j]=y[j] else d[i+1,j]=d[i,j]
}
}
return(d)
}
init=start
LB=3000
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
M.MSH.sampler<- function(LB,init, post,sigma, log=FALSE)
{
nn<- length(init)
d<- matrix(rep(0,nn*(LB+1)), nrow=LB+1)
d[1,]<- init
for(i in 1:LB)
{
y<-multishift(d[i,],sigma)
u<- runif(1,0,1)
if(log==TRUE) {u<-log(u)}
ratio<- post(y)/post(d[i,])
d[i+1,]<- ifelse(u<ratio,y,d[i,])
}
return(d)
}
post
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=TRUE)
}
post
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
M.MSH.sampler<- function(LB,init, post,sigma, log=FALSE)
{
nn<- length(init)
d<- matrix(rep(0,nn*(LB+1)), nrow=LB+1)
d[1,]<- init
for(i in 1:LB)
{
y<-multishift(d[i,],sigma)
u<- runif(1,0,1)
ratio<- post(y)/post(d[i,])
if(log==TRUE) {
u<-log(u)
ratio<-post(y)-post(d[i,])
}
d[i+1,]<- ifelse(u<ratio,y,d[i,])
}
return(d)
}
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
CFTP<- function (LB,start, post,sigma, log=FALSE)
{
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
repeat{
samples<-  M.MSH.sampler(LB,init, post, sigma, log)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
if(length(unique(samples[nrow(samples),]))==1 || r>50) break
}
ifelse(r<50,return(y),"Error: Change lentgh of coalesce block or sigma")
}
d<-M.MSH.sampler(TB,init, post,s)
s
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
plot(d[,1],type='l', ylim=c(-50,50))
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma, log=FALSE)
d[3000,]
post
post<- function(x)
{
dnorm(x, mean=30, sd=1)
}
d=M.MSH.sampler(LB,init, post, sigma, log=FALSE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
CFTP<- function (LB,start, post,sigma, log=FALSE)
{
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
repeat{
samples<-  M.MSH.sampler(LB,init, post, sigma, log)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
if(length(unique(samples[nrow(samples),]))==1 || r>50) break
}
ifelse(r<50,return(y),"Error: Change lentgh of coalesce block or sigma")
}
CFTP(LB,init, post, sigma)
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=TRUE)
}
CFTP(LB,init, post, sigma, log=TRUE)
LB=300
CFTP(LB,init, post, sigma)
CFTP<- function (LB,start, post,sigma, log=FALSE)
{
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
repeat{
samples<-  M.MSH.sampler(LB,init, post, sigma, log)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
if(length(unique(samples[nrow(samples),]))==1 || r>50) break
}
ifelse(r<50,return(y),"Error: Change lentgh of coalesence block or sigma or log parameter")
}
CFTP(LB,init, post, sigma)
CFTP<- function (LB,start, post,sigma, log=FALSE)
{
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
repeat{
samples<-  M.MSH.sampler(LB,init, post, sigma, log)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
if(length(unique(samples[nrow(samples),]))==1 || r>50) break
}
ifelse(r<50,return(y),"Error: Change lentgh of coalesence block or sigma or log parameter")
}
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=TRUE)
}
CFTP(LB,init, post, sigma, log=TRUE)
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=FALSE)
}
CFTP(LB,init, post, sigma, log=FALSE)
CFTP(LB,init, post, sigma, log=TRUE)
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=TRUE)
}
CFTP(LB,init, post, sigma, log=FALSE)
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=FALSE)
}
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=FALSE)
}
CFTP(LB,init, post, sigma, log=TRUE)
LB=3000
CFTP(LB,init, post, sigma, log=TRUE)
CFTP(LB,init, post, sigma, log=FALSE)
sigma
sigma=1
CFTP(LB,init, post, sigma, log=FALSE)
LB=300
CFTP(LB,init, post, sigma, log=FALSE)
CFTP(LB,init, post, sigma)
CFTP(LB,init, post, sigma)
CFTP(LB,init, post, sigma)
CFTP(LB,init, post, sigma)
CFTP(LB,init, post, sigma)
ROCFTP<- function(LB,start, post,sigma, log=FALSE)
{
if (LB <= 0 | length(LB) > 1 | is.numeric(LB)==FALSE) {
return(noquote("Error: The length of Time Bolck should be an integer"))
}
if (length(start) != 2 | is.vector(start)==FALSE) {
return(noquote("Error: The length of start should be two"))
}
if (sigma <= 0 | length(sigma) > 1 | is.numeric(sigma)==FALSE) {
return(noquote("Error: sigma should be a positive number"))
}
allresults<- CFTP(LB,start, post,sigma, log)
if(is.character(allresults)) {return(allresults)} else {
allresults<- allresults[,(ncol(allresults)-length(start)+1):(ncol(allresults))]
allresults<- cbind(rep(NA,nrow(allresults)), allresults)
x<- allresults[nrow(allresults),2]
k<- c(0, nrow(allresults))
repeat{
init<- c(x, start)
samples<-M.MSH.sampler(LB,init, post, sigma, log)
y<-x
x<- samples[nrow(samples),1]
z<-matrix(c(rep(NA, (nrow(allresults))*length(init)-length(init)),init), ncol=ncol(samples), byrow=TRUE)
z1<-matrix(rep(NA, (ncol(allresults))*nrow(samples)), ncol=ncol(allresults), byrow=TRUE)
allresults<- cbind(allresults,z)
sample<- cbind(z1,samples)
allresults<- rbind(allresults,sample)
k<- c(k, nrow(allresults))
if(length(unique(samples[nrow(samples),]))==1) break
}
return(y) }
}
post<- function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}
start<- c(20,40)
LB=300
sigma=1
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
sigma=0.5
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
LB=100
sigma=0.5
ROCFTP(LB,init, post, sigma, log=TRUE)
LB=100
sigma=0.5
ROCFTP(LB,init, post, sigma, log=TRUE)
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("CFTP", "L.R", "M.MSH.sampler", "multishift"))
devtools::document()
usethis::use_testthat()
devtools::check()
post<- function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}
start<- c(20,40)
LB=100
sigma=0.5
ROCFTP.MMS(LB,start, post, sigma, log=TRUE)
ROCFTP.MMS(LB,start, function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, sigma, log=TRUE)
ROCFTP.MMS(LB,start, function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, sigma, log=TRUE)
str(post)
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
devtools::check()
expect_equal(ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE),
noquote("Error: Change lentgh of coalesence block or sigma or log parameter"))
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
d=ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
d
str(d)
devtools::check()
devtools::check()
devtools::check()
ROCFTP.MMS(c(1,5),c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS("a",c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
d=ROCFTP.MMS("a",c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
str(d)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
ROCFTP.MMS(50,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
ROCFTP.MMS(75,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
ROCFTP.MMS(75,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(50,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(50,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(50,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
devtools::check()
devtools::check()
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=-1, log=TRUE)}, 0.5, log=TRUE)
devtools::check()
devtools::check()
search()
devtools::check()
devtools::check()
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
library(usethis)
create_github_token()
create_github()
usethis::use_git()
devtools::check()
