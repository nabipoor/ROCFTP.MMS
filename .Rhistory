u<-log(u)
ratio<-post(y)-post(d[i,])
}
d[i+1,]<- ifelse(u<ratio,y,d[i,])
}
return(d)
}
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
CFTP<- function (LB,start, post,sigma, log=FALSE)
{
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
repeat{
samples<-  M.MSH.sampler(LB,init, post, sigma, log)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
if(length(unique(samples[nrow(samples),]))==1 || r>50) break
}
ifelse(r<50,return(y),"Error: Change lentgh of coalesce block or sigma")
}
d<-M.MSH.sampler(TB,init, post,s)
s
d=M.MSH.sampler(LB,init, post, sigma,log=TRUE)
d[3000,]
plot(d[,1],type='l', ylim=c(-50,50))
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma, log=FALSE)
d[3000,]
post
post<- function(x)
{
dnorm(x, mean=30, sd=1)
}
d=M.MSH.sampler(LB,init, post, sigma, log=FALSE)
d[3000,]
d=M.MSH.sampler(LB,init, post, sigma)
d[3000,]
CFTP<- function (LB,start, post,sigma, log=FALSE)
{
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
repeat{
samples<-  M.MSH.sampler(LB,init, post, sigma, log)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
if(length(unique(samples[nrow(samples),]))==1 || r>50) break
}
ifelse(r<50,return(y),"Error: Change lentgh of coalesce block or sigma")
}
CFTP(LB,init, post, sigma)
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=TRUE)
}
CFTP(LB,init, post, sigma, log=TRUE)
LB=300
CFTP(LB,init, post, sigma)
CFTP<- function (LB,start, post,sigma, log=FALSE)
{
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
repeat{
samples<-  M.MSH.sampler(LB,init, post, sigma, log)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
if(length(unique(samples[nrow(samples),]))==1 || r>50) break
}
ifelse(r<50,return(y),"Error: Change lentgh of coalesence block or sigma or log parameter")
}
CFTP(LB,init, post, sigma)
CFTP<- function (LB,start, post,sigma, log=FALSE)
{
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
repeat{
samples<-  M.MSH.sampler(LB,init, post, sigma, log)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
if(length(unique(samples[nrow(samples),]))==1 || r>50) break
}
ifelse(r<50,return(y),"Error: Change lentgh of coalesence block or sigma or log parameter")
}
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=TRUE)
}
CFTP(LB,init, post, sigma, log=TRUE)
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=FALSE)
}
CFTP(LB,init, post, sigma, log=FALSE)
CFTP(LB,init, post, sigma, log=TRUE)
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=TRUE)
}
CFTP(LB,init, post, sigma, log=FALSE)
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=FALSE)
}
post<- function(x)
{
dnorm(x, mean=30, sd=1, log=FALSE)
}
CFTP(LB,init, post, sigma, log=TRUE)
LB=3000
CFTP(LB,init, post, sigma, log=TRUE)
CFTP(LB,init, post, sigma, log=FALSE)
sigma
sigma=1
CFTP(LB,init, post, sigma, log=FALSE)
LB=300
CFTP(LB,init, post, sigma, log=FALSE)
CFTP(LB,init, post, sigma)
CFTP(LB,init, post, sigma)
CFTP(LB,init, post, sigma)
CFTP(LB,init, post, sigma)
CFTP(LB,init, post, sigma)
ROCFTP<- function(LB,start, post,sigma, log=FALSE)
{
if (LB <= 0 | length(LB) > 1 | is.numeric(LB)==FALSE) {
return(noquote("Error: The length of Time Bolck should be an integer"))
}
if (length(start) != 2 | is.vector(start)==FALSE) {
return(noquote("Error: The length of start should be two"))
}
if (sigma <= 0 | length(sigma) > 1 | is.numeric(sigma)==FALSE) {
return(noquote("Error: sigma should be a positive number"))
}
allresults<- CFTP(LB,start, post,sigma, log)
if(is.character(allresults)) {return(allresults)} else {
allresults<- allresults[,(ncol(allresults)-length(start)+1):(ncol(allresults))]
allresults<- cbind(rep(NA,nrow(allresults)), allresults)
x<- allresults[nrow(allresults),2]
k<- c(0, nrow(allresults))
repeat{
init<- c(x, start)
samples<-M.MSH.sampler(LB,init, post, sigma, log)
y<-x
x<- samples[nrow(samples),1]
z<-matrix(c(rep(NA, (nrow(allresults))*length(init)-length(init)),init), ncol=ncol(samples), byrow=TRUE)
z1<-matrix(rep(NA, (ncol(allresults))*nrow(samples)), ncol=ncol(allresults), byrow=TRUE)
allresults<- cbind(allresults,z)
sample<- cbind(z1,samples)
allresults<- rbind(allresults,sample)
k<- c(k, nrow(allresults))
if(length(unique(samples[nrow(samples),]))==1) break
}
return(y) }
}
post<- function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}
start<- c(20,40)
LB=300
sigma=1
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
sigma=0.5
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
ROCFTP(LB,init, post, sigma, log=TRUE)
LB=100
sigma=0.5
ROCFTP(LB,init, post, sigma, log=TRUE)
LB=100
sigma=0.5
ROCFTP(LB,init, post, sigma, log=TRUE)
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("CFTP", "L.R", "M.MSH.sampler", "multishift"))
devtools::document()
usethis::use_testthat()
devtools::check()
post<- function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}
start<- c(20,40)
LB=100
sigma=0.5
ROCFTP.MMS(LB,start, post, sigma, log=TRUE)
ROCFTP.MMS(LB,start, function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, sigma, log=TRUE)
ROCFTP.MMS(LB,start, function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, sigma, log=TRUE)
str(post)
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
devtools::check()
expect_equal(ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE),
noquote("Error: Change lentgh of coalesence block or sigma or log parameter"))
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
d=ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
d
str(d)
devtools::check()
devtools::check()
devtools::check()
ROCFTP.MMS(c(1,5),c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS("a",c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
d=ROCFTP.MMS("a",c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
str(d)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
ROCFTP.MMS(50,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
ROCFTP.MMS(75,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
ROCFTP.MMS(75,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(50,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(50,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(50,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
devtools::check()
devtools::check()
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=-1, log=TRUE)}, 0.5, log=TRUE)
devtools::check()
devtools::check()
search()
devtools::check()
devtools::check()
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
library(usethis)
create_github_token()
create_github()
usethis::use_git()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_readme_rmd()
devtools::check()
library(rmarkdown)
render("C:/Users/mnabi/Desktop/ROCFTP.MMS")
render("C:/Users/mnabi/Desktop/ROCFTP.MMS/README.Rmd")
render("C:/Users/mnabi/Desktop/ROCFTP.MMS/README.Rmd")
render("C:/Users/mnabi/Desktop/ROCFTP.MMS/README.Rmd")
devtools::spell_check()
install.packages("spelling")
install.packages("spelling")
library(spelling)
devtools::spell_check()
install.packages("RCPP")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::check()
OCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
L.R<- function(sigma)
{
z<- rnorm(1,0,sigma)
u<- runif(1,0,dnorm(z,sd=sigma))
main<- sigma*sqrt(-2*log(sqrt(2*pi)*u*sigma, base = exp(1)))
m<- c(-main,main)
return(m)
}
multishift<- function(s,sigma)
{
m<-L.R(sigma)
X<- runif(1,m[1],m[2])
f<-floor((s+m[2]-X)/(m[2]-m[1]))*(m[2]-m[1])+X
return(f)
}
M.MSH.sampler<- function(LB,init, post,sigma, log=FALSE)
{
nn<- length(init)
d<- matrix(rep(0,nn*(LB+1)), nrow=LB+1)
d[1,]<- init
for(i in 1:LB)
{
y<-multishift(d[i,],sigma)
u<- runif(1,0,1)
ratio<- post(y)/post(d[i,])
if(log==TRUE) {
u<-log(u)
ratio<-post(y)-post(d[i,])
}
d[i+1,]<- ifelse(u<ratio,y,d[i,])
}
return(d)
}
CFTP<- function (LB,start, post,sigma, log=FALSE)
{
allresult<- NULL
y<- NULL
init<- start
T<- 0
r<-0
repeat{
samples<-  M.MSH.sampler(LB,init, post, sigma, log)
T<- T+ nrow(samples)
r<-r+1
na<-matrix(c(rep(NA, (T-1)*length(start)),start), nrow=T, byrow=TRUE)
allresult<- cbind(rbind(allresult, samples),na)
y<- samples
init<- allresult[T,]
if(length(unique(samples[nrow(samples),]))==1 || r>50) break
}
ifelse(r<50,return(y),return(noquote("Error: Change length of coalescence block or sigma or log parameter")))
}
ROCFTP.MMS<- function(LB,start, post,sigma, log=FALSE)
{
if (LB <= 0 | length(LB) > 1 | is.numeric(LB)==FALSE) {
return(noquote("Error: LB should be an integer"))
}
if (length(start) != 2 | is.vector(start)==FALSE) {
return(noquote("Error: The length of start vector should be two"))
}
if (sigma <= 0 | length(sigma) > 1 | is.numeric(sigma)==FALSE) {
return(noquote("Error: sigma should be a positive number"))
}
allresults<- CFTP(LB,start, post,sigma, log)
if(is.character(allresults)) {return(allresults)} else {
allresults<- allresults[,(ncol(allresults)-length(start)+1):(ncol(allresults))]
allresults<- cbind(rep(NA,nrow(allresults)), allresults)
x<- allresults[nrow(allresults),2]
k<- c(0, nrow(allresults))
repeat{
init<- c(x, start)
samples<-M.MSH.sampler(LB,init, post, sigma, log)
y<-x
x<- samples[nrow(samples),1]
z<-matrix(c(rep(NA, (nrow(allresults))*length(init)-length(init)),init), ncol=ncol(samples), byrow=TRUE)
z1<-matrix(rep(NA, (ncol(allresults))*nrow(samples)), ncol=ncol(allresults), byrow=TRUE)
allresults<- cbind(allresults,z)
sample<- cbind(z1,samples)
allresults<- rbind(allresults,sample)
k<- c(k, nrow(allresults))
if(length(unique(samples[nrow(samples),]))==1) break
}
return(y) }
}
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
expect_equal(ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE),
noquote("Error: Change lentgh of coalesence block or sigma or log parameter"))
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=FALSE)
devtools::check()
ROCFTP.MMS("a",c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(-10,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
ROCFTP.MMS(100,c(20,40), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, -0.5, log=TRUE)
ROCFTP.MMS(100,c(20,40,5), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE)
expect_equal(ROCFTP.MMS(100,c(20,40,5), function(x) {dnorm(x, mean=30, sd=1, log=TRUE)}, 0.5, log=TRUE),
noquote("Error: The length of start vector should be two"))
devtools::check()
devtools::spell_check()
devtools::check()
devtools::check()
devtools::spell_check()
rhub::check()
usethis::use_github_action_check_standard()
devtools::check_rhub()
devtools::check()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check()
devtools::check_rhub()
devtools::check()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_win_devel()
devtools::check()
devtools::check()
devtools::check()
load("C:/Users/mnabi/Desktop/ROCFTP.MMS/.RData")
devtools::check()
devtools::check()
rm(list = c("CFTP", "L.R", "M.MSH.sampler", "multishift", "ROCFTP.MMS"))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build_manual()
devtools::check(manual=TRUE)
tinytex::install_tinytex()
devtools::check(manual=TRUE)
library(tinytex)
devtools::check(manual=TRUE)
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX/miktex/bin/x64/",sep=";"))
devtools::check(manual=TRUE)
library(inconsolata )
install.packages("inconsolata")
devtools::check(manual=TRUE)
devtools::build_manual()
devtools::build_manual()
devtools::check()
devtools::check()
devtools::build_manual()
devtools::check()
devtools::check()
devtools::check()
devtools::build_manual()
devtools::check()
devtools::build_manual()
results <- rhub::check_for_cran()
results$cran_summary()
results$cran_summary()
results$cran_summary()
usethis::use_cran_comments()
devtools::check_rhub()
devtools::check()
devtools::check_rhub()
devtools::spell_check()
devtools::check_rhub()
devtools::spell_check()
devtools::build_manual()
devtools::check()
devtools::check()
devtools::build_manual()
devtools::spell_check()
devtools::check_win_devel()
devtools::check_rhub()
devtools::check()
?repositories
devtools::check()
devtools::check_rhub()
devtools::check_win_devel()
devtools::check_rhub()
devtools::build_manual()
package_version(testthat)
package_version("testthat")
packageVersion("testthat")
devtools::install_deps(dependencies = TRUE)
check(force_suggests = FALSE)
check(force_suggests = FALSE)
devtools::check_rhub()
packageVersion("testthat")
packageVersion("stats")
packageVersion("RoxygenNote")
devtools::check_rhub()
devtools::check()
devtools::check_rhub()
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(vctrs)
install.packages("vctrs")
install.packages("vctrs")
library(vctrs)
packageVersion(vctrs)
packageVersion("vctrs")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(rlang)
